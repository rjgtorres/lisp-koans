; SLIME 2.22
CL-USER> (mod '(15 42 189))
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "invalid number of arguments: ~S" {10055162C3}>.
CL-USER> (mod '(15 42 189) 10)
; Evaluation aborted on #<TYPE-ERROR expected-type: REAL datum: (15 42 189)>.
CL-USER> (mod 15 10)
5
CL-USER> (mod 105 10)
5
CL-USER> (defun transpose (L) (apply #'mapcar (cons #'first L)))
TRANSPOSE
CL-USER> (transpose '((1 2 3)
                             (4 5 6)
                             (7 8 9)))
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "invalid number of arguments: ~S" {1005A81923}>.
CL-USER> (first '((1 2 3)
                             (4 5 6)
                             (7 8 9)))
(1 2 3)
CL-USER> (list '((1 2 3)
                             (4 5 6)
                             (7 8 9)))
(((1 2 3) (4 5 6) (7 8 9)))
CL-USER> (defun transpose (L) (apply #'mapcar (cons #'list L)))
WARNING: redefining COMMON-LISP-USER::TRANSPOSE in DEFUN
TRANSPOSE
CL-USER> (transpose '((1 2 3)
                             (4 5 6)
                             (7 8 9)))
((1 4 7) (2 5 8) (3 6 9))
CL-USER> (pprint (transpose '((1 2 3)
                             (4 5 6)
                             (7 8 9))))

((1 4 7) (2 5 8) (3 6 9))
; No value
CL-USER> (defun transpose (L) (apply #'mapcar #'list L))
WARNING: redefining COMMON-LISP-USER::TRANSPOSE in DEFUN
TRANSPOSE
CL-USER> (transpose '((1 2 3)
                             (4 5 6)
                             (7 8 9)))
((1 4 7) (2 5 8) (3 6 9))
CL-USER> (expt 2)
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "invalid number of arguments: ~S" {1005CDEC93}>.
CL-USER> (expt '2)
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "invalid number of arguments: ~S" {1005EE17B3}>.
CL-USER> (expt '(2))
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "invalid number of arguments: ~S" {100607AD13}>.
CL-USER> (reduce #'expt '(2 3 2))
64
CL-USER> (reduce #'expt '(2))
2
CL-USER> (reduce #'expt '(2 3))
8
CL-USER> (expt '(2 3))
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "invalid number of arguments: ~S" {100622B6D3}>.
CL-USER> (expt 2 3)
8
CL-USER> (expt 2 3 2)
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "invalid number of arguments: ~S" {10063D1C53}>.
CL-USER> (expt 2 10)
1024
CL-USER> (reduce #'expt '(2 3 2) :from-end t)
512
CL-USER> (expt 2 5)
32
CL-USER> (expt 2 9)
512
CL-USER> (expt 0 9)
0
; compiling (DEFINE-CONDITION LOGLINE-PARSE-ERROR ...)
; compiling (DEFUN GET-LOGLINE-TYPE ...)
CL-USER> (handler-case (get-logline-type "TIMESTAMP y13m01d03")
                    (logline-parse-error (condition) (list (reason condition) (original-line condition))))

:TIMESTAMP-LOGLINE-TYPE(handler-case (get-logline-type "bogus logline")
                    (logline-parse-error (condition) (list (reason condition) (original-line condition))))
CL-USER> (handler-case (get-logline-type "bogus logline")
                    (logline-parse-error (condition) (list (reason condition) (original-line condition))))
(:UNKNOWN-TOKEN-REASON "bogus logline")
CL-USER> (loop for letter in '(:a :b :c :d))
NIL
CL-USER> (loop for letter in '(:a :b :c :d))
NIL
CL-USER> (loop for letter in '(:a :b :c :d) (print letter)
						   )
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "~?
current LOOP context:~{ ~S~}." {1006F34103}>.
CL-USER> (loop for letter in '(:a :b :c :d) print letter
						   )
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "~?
current LOOP context:~{ ~S~}." {10070D7803}>.
CL-USER> (loop for letter in '(:a :b :c :d) collect letter)
(:A :B :C :D)
CL-USER> (let* ((letters '(:a :b :c :d))
           (loop-result
             (loop for letter in letters
                   for i from 1 to 1000
                   collect (list i letter))))
	   (print loop-result))
		  

((1 :A) (2 :B) (3 :C) (4 :D)) 
((1 :A) (2 :B) (3 :C) (4 :D))
CL-USER> (let* ((letters '(:a :b :c :d))
           (loop-result
             (loop for letter in letters
                   for i from 1 to 1000
                   collect (list i letter)))))
		  
; in:
;      LET* ((LETTERS '(:A :B :C :D))
;        (LOOP-RESULT
;         (LOOP FOR LETTER IN LETTERS
;               FOR I FROM 1 TO 1000
;               COLLECT ...)))
;     (LET* ((LETTERS '(:A :B :C :D))
;            (LOOP-RESULT
;             (LOOP FOR LETTER IN LETTERS
;                   FOR I FROM 1 TO 1000
;                   COLLECT ...))))
; 
; caught STYLE-WARNING:
;   The variable LOOP-RESULT is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
NIL
CL-USER> (let* ((letters '(:a :b :c :d))
           (loop-result
             (loop for letter in letters
                   for i from 1 to 1000
                   collect (list i letter)))))

; in:
;      LET* ((LETTERS '(:A :B :C :D))
;        (LOOP-RESULT
;         (LOOP FOR LETTER IN LETTERS
;               FOR I FROM 1 TO 1000
;               COLLECT ...)))
;     (LET* ((LETTERS '(:A :B :C :D))
;            (LOOP-RESULT
;             (LOOP FOR LETTER IN LETTERS
;                   FOR I FROM 1 TO 1000
;                   COLLECT ...))))
; 
; caught STYLE-WARNING:
;   The variable LOOP-RESULT is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
NIL
CL-USER> (let* ((letters '(:a :b :c :d))
           (loop-result
             (loop for letter in letters
                   for i from 1 to 1000
                   collect (list i letter))))
	   (print loop-result))


((1 :A) (2 :B) (3 :C) (4 :D)) 
((1 :A) (2 :B) (3 :C) (4 :D))
CL-USER> (let* ((letters '(:a :b :c :d))
           (loop-result
             (loop for letter in letters
                   for i from 0 to 1000 by 5
                   collect (list i letter))))
	   (print loop-result))


((0 :A) (5 :B) (10 :C) (15 :D)) 
((0 :A) (5 :B) (10 :C) (15 :D))
CL-USER> (let* ((letters '(:a :b :c))
           (loop-result-in
            (loop for letter in letters collect letter))
           (loop-result-on
            (loop for letter on letters collect letter))))
; in:
;      LET* ((LETTERS '(:A :B :C))
;        (LOOP-RESULT-IN
;         (LOOP FOR LETTER IN LETTERS
;               COLLECT LETTER))
;        (LOOP-RESULT-ON
;         (LOOP FOR LETTER ON LETTERS
;               COLLECT LETTER)))
;     (LET* ((LETTERS '(:A :B :C))
;            (LOOP-RESULT-IN
;             (LOOP FOR LETTER IN LETTERS
;                   COLLECT LETTER))
;            (LOOP-RESULT-ON
;             (LOOP FOR LETTER ON LETTERS
;                   COLLECT LETTER))))
; 
; caught STYLE-WARNING:
;   The variable LOOP-RESULT-IN is defined but never used.
; 
; caught STYLE-WARNING:
;   The variable LOOP-RESULT-ON is defined but never used.
; 
; compilation unit finished
;   caught 2 STYLE-WARNING conditions
NIL
CL-USER> (let* ((letters '(:a :b :c))
		(loop-result-on
            (loop for letter on letters collect letter))) lette)
; in:
;      LET* ((LETTERS '(:A :B :C))
;        (LOOP-RESULT-ON
;         (LOOP FOR LETTER ON LETTERS
;               COLLECT LETTER)))
;     (LET* ((LETTERS '(:A :B :C))
;            (LOOP-RESULT-ON
;             (LOOP FOR LETTER ON LETTERS
;                   COLLECT LETTER)))
;       LETTE)
; 
; caught STYLE-WARNING:
;   The variable LOOP-RESULT-ON is defined but never used.
; in:
;      LET* ((LETTERS '(:A :B :C))
;        (LOOP-RESULT-ON
;         (LOOP FOR LETTER ON LETTERS
;               COLLECT LETTER)))
;     (LET* ((LETTERS '(:A :B :C))
;            (LOOP-RESULT-ON
;             (LOOP FOR LETTER ON LETTERS
;                   COLLECT LETTER)))
;       LETTE)
; 
; caught WARNING:
;   undefined variable: COMMON-LISP-USER::LETTE
; 
; compilation unit finished
;   Undefined variable:
;     LETTE
;   caught 1 WARNING condition
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNBOUND-VARIABLE LETTE {1007AB1D93}>.
CL-USER> (let* ((letters '(:a :b :c))
		(loop-result-on
            (loop for letter on letters collect letter))) letters)
; in:
;      LET* ((LETTERS '(:A :B :C))
;        (LOOP-RESULT-ON
;         (LOOP FOR LETTER ON LETTERS
;               COLLECT LETTER)))
;     (LET* ((LETTERS '(:A :B :C))
;            (LOOP-RESULT-ON
;             (LOOP FOR LETTER ON LETTERS
;                   COLLECT LETTER)))
;       LETTERS)
; 
; caught STYLE-WARNING:
;   The variable LOOP-RESULT-ON is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
(:A :B :C)
CL-USER> (let* ((letters '(:a :b :c))
		(loop-result-on
            (loop for letter on letters collect letter))) loop-result-on)
((:A :B :C) (:B :C) (:C))
CL-USER> (loop-result-in-cdr
            (loop for letter in '(:a :b :c :d :e :f) by #'cdr collect letter))
; in:
;      LOOP-RESULT-IN-CDR (LOOP FOR LETTER IN '(:A :B :C :D :E :F) BY #'CDR
;                           COLLECT LETTER)
;     (LOOP-RESULT-IN-CDR
;      (LOOP FOR LETTER IN '(:A :B :C :D :E :F) BY #'CDR
;            COLLECT LETTER))
; 
; caught STYLE-WARNING:
;   undefined function: COMMON-LISP-USER::LOOP-RESULT-IN-CDR
; 
; compilation unit finished
;   Undefined function:
;     LOOP-RESULT-IN-CDR
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNDEFINED-FUNCTION LOOP-RESULT-IN-CDR {1007E5CEF3}>.
CL-USER> '(loop-result-in-cdr
            (loop for letter in '(:a :b :c :d :e :f) by #'cdr collect letter))
(LOOP-RESULT-IN-CDR
 (LOOP FOR LETTER IN '(:A :B :C :D :E :F) BY #'CDR
       COLLECT LETTER))
CL-USER> (let* ((letters '(:a :b :c :d :e :f))
		(loop-result-on
            (loop for letter in lettres by #'cdr collect letter))) loop-result-on)
; in:
;      LET* ((LETTERS '(:A :B :C :D :E :F))
;        (LOOP-RESULT-ON
;         (LOOP FOR LETTER IN LETTRES BY #'CDR
;               COLLECT LETTER)))
;     (LET* ((LETTERS '(:A :B :C :D :E :F))
;            (LOOP-RESULT-ON
;             (LOOP FOR LETTER IN LETTRES BY #'CDR
;                   COLLECT LETTER)))
;       LOOP-RESULT-ON)
; 
; caught STYLE-WARNING:
;   The variable LETTERS is defined but never used.
; in:
;      LET* ((LETTERS '(:A :B :C :D :E :F))
;        (LOOP-RESULT-ON
;         (LOOP FOR LETTER IN LETTRES BY #'CDR
;               COLLECT LETTER)))
;     (LOOP FOR LETTER IN LETTRES BY #'CDR
;           COLLECT LETTER)
; --> BLOCK 
; ==>
;   (LET ((LETTER NIL) (#:LOOP-LIST-0 LETTRES))
;     (DECLARE)
;     (SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD (#:LOOP-LIST-HEAD-1
;                                               #:LOOP-LIST-TAIL-2)
;       (TAGBODY
;        SB-LOOP::NEXT-LOOP
;         (WHEN (ENDP #:LOOP-LIST-0) (GO SB-LOOP::END-LOOP))
;         (SB-LOOP::LOOP-DESETQ LETTER (CAR #:LOOP-LIST-0))
;         (SB-LOOP::LOOP-DESETQ #:LOOP-LIST-0 (CDR #:LOOP-LIST-0))
;         (SB-LOOP::LOOP-COLLECT-RPLACD (#:LOOP-LIST-HEAD-1 #:LOOP-LIST-TAIL-2)
;                                       (LIST LETTER))
;         (GO SB-LOOP::NEXT-LOOP)
;        SB-LOOP::END-LOOP
;         (RETURN-FROM NIL (SB-LOOP::LOOP-COLLECT-ANSWER #:LOOP-LIST-HEAD-1)))))
; 
; caught WARNING:
;   undefined variable: COMMON-LISP-USER::LETTRES
; 
; compilation unit finished
;   Undefined variable:
;     LETTRES
;   caught 1 WARNING condition
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNBOUND-VARIABLE LETTRES {1008060903}>.
CL-USER> (let* ((letters '(:a :b :c :d :e :f))
		(loop-result-on
            (loop for letter in lettres by #'cdr collect letter))) loop-result-on)
; in:
;      LET* ((LETTERS '(:A :B :C :D :E :F))
;        (LOOP-RESULT-ON
;         (LOOP FOR LETTER IN LETTRES BY #'CDR
;               COLLECT LETTER)))
;     (LET* ((LETTERS '(:A :B :C :D :E :F))
;            (LOOP-RESULT-ON
;             (LOOP FOR LETTER IN LETTRES BY #'CDR
;                   COLLECT LETTER)))
;       LOOP-RESULT-ON)
; 
; caught STYLE-WARNING:
;   The variable LETTERS is defined but never used.
; in:
;      LET* ((LETTERS '(:A :B :C :D :E :F))
;        (LOOP-RESULT-ON
;         (LOOP FOR LETTER IN LETTRES BY #'CDR
;               COLLECT LETTER)))
;     (LOOP FOR LETTER IN LETTRES BY #'CDR
;           COLLECT LETTER)
; --> BLOCK 
; ==>
;   (LET ((LETTER NIL) (#:LOOP-LIST-0 LETTRES))
;     (DECLARE)
;     (SB-LOOP::WITH-LOOP-LIST-COLLECTION-HEAD (#:LOOP-LIST-HEAD-1
;                                               #:LOOP-LIST-TAIL-2)
;       (TAGBODY
;        SB-LOOP::NEXT-LOOP
;         (WHEN (ENDP #:LOOP-LIST-0) (GO SB-LOOP::END-LOOP))
;         (SB-LOOP::LOOP-DESETQ LETTER (CAR #:LOOP-LIST-0))
;         (SB-LOOP::LOOP-DESETQ #:LOOP-LIST-0 (CDR #:LOOP-LIST-0))
;         (SB-LOOP::LOOP-COLLECT-RPLACD (#:LOOP-LIST-HEAD-1 #:LOOP-LIST-TAIL-2)
;                                       (LIST LETTER))
;         (GO SB-LOOP::NEXT-LOOP)
;        SB-LOOP::END-LOOP
;         (RETURN-FROM NIL (SB-LOOP::LOOP-COLLECT-ANSWER #:LOOP-LIST-HEAD-1)))))
; 
; caught WARNING:
;   undefined variable: COMMON-LISP-USER::LETTRES
; 
; compilation unit finished
;   Undefined variable:
;     LETTRES
;   caught 1 WARNING condition
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNBOUND-VARIABLE LETTRES {1008248983}>.
CL-USER> (let* ((letters '(:a :b :c :d :e :f))
		(loop-result-on
            (loop for letter in letters by #'cdr collect letter))) loop-result-on)
(:A :B :C :D :E :F)
CL-USER> (loop for x in '(1 1 2 3 5 8 13)
                 when (evenp x) sum x)))
; Evaluation aborted on #<SB-INT:SIMPLE-READER-ERROR "unmatched close parenthesis" {10088FC7C3}>.
CL-USER> (let ((loop-return
           (loop for x in '(1 1 2 3 5 8 13)
                 when (evenp x) sum x))))
; in:
;      LET ((LOOP-RETURN
;        (LOOP FOR X IN '(1 1 2 3 5 8 13)
;              WHEN (EVENP X)
;              SUM X)))
;     (LET ((LOOP-RETURN
;            (LOOP FOR X IN '(1 1 2 3 5 8 13)
;                  WHEN (EVENP X)
;                  SUM X))))
; 
; caught STYLE-WARNING:
;   The variable LOOP-RETURN is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
NIL
CL-USER> (let ((loop-return
           (loop for x in '(1 1 2 3 5 8 13)
                 when (evenp x) sum x))) loop)
; in:
;      LET ((LOOP-RETURN
;        (LOOP FOR X IN '(1 1 2 3 5 8 13)
;              WHEN (EVENP X)
;              SUM X)))
;     (LET ((LOOP-RETURN
;            (LOOP FOR X IN '(1 1 2 3 5 8 13)
;                  WHEN (EVENP X)
;                  SUM X)))
;       LOOP)
; 
; caught STYLE-WARNING:
;   The variable LOOP-RETURN is defined but never used.
; in:
;      LET ((LOOP-RETURN
;        (LOOP FOR X IN '(1 1 2 3 5 8 13)
;              WHEN (EVENP X)
;              SUM X)))
;     (LET ((LOOP-RETURN
;            (LOOP FOR X IN '(1 1 2 3 5 8 13)
;                  WHEN (EVENP X)
;                  SUM X)))
;       LOOP)
; 
; caught WARNING:
;   undefined variable: COMMON-LISP:LOOP
; 
; compilation unit finished
;   Undefined variable:
;     LOOP
;   caught 1 WARNING condition
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNBOUND-VARIABLE LOOP {1008B58763}>.
CL-USER> (let ((loop-return
           (loop for x in '(1 1 2 3 5 8 13)
                 when (evenp x) sum x))) loop-return)
10
CL-USER> (let ((loop-return
           (loop for x in '(1 1 2 3 5 8 13)
                 when (evenp x) print x))) loop-return)
; in:
;      LET ((LOOP-RETURN
;        (LOOP FOR X IN '(1 1 2 3 5 8 13)
;              WHEN (EVENP X) PRINT X)))
;     (LOOP FOR X IN '(1 1 2 3 5 8 13)
;           WHEN (EVENP X) PRINT X)
; 
; caught ERROR:
;   during macroexpansion of (LOOP FOR X ...). Use *BREAK-ON-SIGNALS* to intercept.
;   
;    PRINT does not introduce a LOOP clause that can follow WHEN.
;   current LOOP context: PRINT X.
; 
; compilation unit finished
;   caught 1 ERROR condition
; Evaluation aborted on #<SB-INT:COMPILED-PROGRAM-ERROR {1008D70AB3}>.
CL-USER> (let ((loop-return
           (loop for x in '(1 1 2 3 5 8 13)
                 when (evenp x) sum x))) loop-return)
10
CL-USER> (mod 1 3)
1
CL-USER> (mod 2 3)
2
CL-USER> (mod 3 3)
0
CL-USER> (mod 5 3)
2
CL-USER> (mod 8 3)
2
CL-USER> (mod 13 3)
1
CL-USER> (equal 2 2)
T
CL-USER> (equal 2 2 2)
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "invalid number of arguments: ~S" {1008F7AF43}>.
CL-USER> (mapcar #equal '( 2 2 2))
; Evaluation aborted on #<SB-INT:SIMPLE-READER-ERROR "no dispatch function defined for ~S" {1009135753}>.
CL-USER> (appl #equal '( 2 2 2))
; Evaluation aborted on #<SB-INT:SIMPLE-READER-ERROR "no dispatch function defined for ~S" {10092CDDA3}>.
CL-USER> (apply #equal '( 2 2 2))
; Evaluation aborted on #<SB-INT:SIMPLE-READER-ERROR "no dispatch function defined for ~S" {100946B943}>.
CL-USER> (apply #equal '(2 2 2))
; Evaluation aborted on #<SB-INT:SIMPLE-READER-ERROR "no dispatch function defined for ~S" {100960D643}>.
CL-USER> (redu #equal '(2 2 2))
; Evaluation aborted on #<SB-INT:SIMPLE-READER-ERROR "no dispatch function defined for ~S" {10097B0873}>.
CL-USER> (reduce #equal '(2 2 2))
; Evaluation aborted on #<SB-INT:SIMPLE-READER-ERROR "no dispatch function defined for ~S" {100994B943}>.
CL-USER> (mapcar #'equal '( 2 2 2))
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "invalid number of arguments: ~S" {1009AF5F43}>.
CL-USER> (reduce #'equal '( 2 2 2))
NIL
CL-USER> (reduce #'= '(2 2 2))
; Evaluation aborted on #<TYPE-ERROR expected-type: NUMBER datum: T>.
CL-USER> (reduce #'eql '(2 2 2))
NIL
CL-USER> (app #'eql '(2 2 2))
; in: APP #'EQL
;     (APP #'EQL '(2 2 2))
; 
; caught STYLE-WARNING:
;   undefined function: COMMON-LISP-USER::APP
; 
; compilation unit finished
;   Undefined function:
;     APP
;   caught 1 STYLE-WARNING condition
; Evaluation aborted on #<UNDEFINED-FUNCTION APP {1009E587E3}>.
CL-USER> (apply #'eql '(2 2 2))
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "invalid number of arguments: ~S" {1009FFB2B3}>.
CL-USER> (sqrt 2)
1.4142135
CL-USER> (expt 2)
; Evaluation aborted on #<SB-INT:SIMPLE-PROGRAM-ERROR "invalid number of arguments: ~S" {100A1AAB53}>.
CL-USER> (expt 2 2)
4
CL-USER> (defun triangle (a b c)
  (cond ((= c (sqrt (+ (expt b 2) (expt c 2)))) "it is a triangle"
	 )))
; in: DEFUN TRIANGLE
;     (SB-INT:NAMED-LAMBDA TRIANGLE
;         (A B C)
;       (BLOCK TRIANGLE (COND ((= C #) "it is a triangle"))))
; 
; caught STYLE-WARNING:
;   The variable A is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
TRIANGLE
CL-USER> (triangle 2 2 2)
NIL
CL-USER> (defun triangle (a b c)
  (cond ((= c (sqrt (+ (expt b 2) (expt c 2)))) (print "it is a triangle")
	 )))
; in: DEFUN TRIANGLE
;     (SB-INT:NAMED-LAMBDA TRIANGLE
;         (A B C)
;       (BLOCK TRIANGLE (COND ((= C #) (PRINT "it is a triangle")))))
; 
; caught STYLE-WARNING:
;   The variable A is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
WARNING: redefining COMMON-LISP-USER::TRIANGLE in DEFUN
TRIANGLE
CL-USER> (triangle 2 2 2)
NIL
CL-USER> (defun triangle (a b c)
  (cond ((= c (sqrt (+ (expt b 2) (expt c 2)))) (print c)
	 )))
; in: DEFUN TRIANGLE
;     (SB-INT:NAMED-LAMBDA TRIANGLE
;         (A B C)
;       (BLOCK TRIANGLE (COND ((= C #) (PRINT C)))))
; 
; caught STYLE-WARNING:
;   The variable A is defined but never used.
; 
; compilation unit finished
;   caught 1 STYLE-WARNING condition
WARNING: redefining COMMON-LISP-USER::TRIANGLE in DEFUN
TRIANGLE
CL-USER> (triangle 2 2 2)
NIL
CL-USER> (triangle 10 10 10)
NIL
CL-USER> 